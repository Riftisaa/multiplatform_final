import 'package:flutter/material.dart';
import '../../domain/entities/todo_entity.dart';
import '../../domain/usecases/todo/get_todos.dart';
import '../../domain/usecases/todo/add_todo.dart';
import '../../domain/usecases/todo/update_todo.dart';
import '../../domain/usecases/todo/delete_todo.dart';
import '../../domain/usecases/todo/toggle_todo_status.dart';
import '../../data/repositories/todo_repository_impl.dart';
import '../../data/datasources/todo_remote_datasource.dart';

class TodoProvider extends ChangeNotifier {
  final GetTodos _getTodos;
  final AddTodo _addTodo;
  final UpdateTodo _updateTodo;
  final DeleteTodo _deleteTodo;
  final ToggleTodoStatus _toggleTodoStatus;

  TodoProvider()
      : _getTodos = GetTodos(TodoRepositoryImpl(TodoRemoteDatasourceImpl())),
        _addTodo = AddTodo(TodoRepositoryImpl(TodoRemoteDatasourceImpl())),
        _updateTodo = UpdateTodo(TodoRepositoryImpl(TodoRemoteDatasourceImpl())),
        _deleteTodo = DeleteTodo(TodoRepositoryImpl(TodoRemoteDatasourceImpl())),
        _toggleTodoStatus = ToggleTodoStatus(TodoRepositoryImpl(TodoRemoteDatasourceImpl()));

  List<TodoEntity> _todos = [];
  List<TodoEntity> get todos => _todos;

  bool _isLoading = false;
  bool get isLoading => _isLoading;

  String? _errorMessage;
  String? get errorMessage => _errorMessage;

  Future<void> loadTodos(String userId) async {
    _isLoading = true;
    _errorMessage = null;
    notifyListeners();

    try {
      _todos = await _getTodos(userId);
      _errorMessage = null;
    } catch (e) {
      _errorMessage = e.toString();
      _todos = [];
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  Future<bool> addTodo({
    required String title,
    required String description,
    required String userId,
  }) async {
    try {
      final newTodo = TodoEntity(
        id: '', // Will be generated by Firestore
        title: title,
        description: description,
        isCompleted: false,
        createdAt: DateTime.now(),
        userId: userId,
      );

      final addedTodo = await _addTodo(newTodo);
      _todos.insert(0, addedTodo);
      _errorMessage = null;
      notifyListeners();
      return true;
    } catch (e) {
      _errorMessage = e.toString();
      notifyListeners();
      return false;
    }
  }

  Future<bool> updateTodo(TodoEntity todo) async {
    try {
      final updatedTodo = await _updateTodo(todo);
      final index = _todos.indexWhere((t) => t.id == todo.id);
      if (index != -1) {
        _todos[index] = updatedTodo;
        _errorMessage = null;
        notifyListeners();
      }
      return true;
    } catch (e) {
      _errorMessage = e.toString();
      notifyListeners();
      return false;
    }
  }

  Future<bool> deleteTodo(String todoId) async {
    try {
      await _deleteTodo(todoId);
      _todos.removeWhere((todo) => todo.id == todoId);
      _errorMessage = null;
      notifyListeners();
      return true;
    } catch (e) {
      _errorMessage = e.toString();
      notifyListeners();
      return false;
    }
  }

  Future<bool> toggleTodoStatus(String todoId) async {
    try {
      final updatedTodo = await _toggleTodoStatus(todoId);
      final index = _todos.indexWhere((t) => t.id == todoId);
      if (index != -1) {
        _todos[index] = updatedTodo;
        _errorMessage = null;
        notifyListeners();
      }
      return true;
    } catch (e) {
      _errorMessage = e.toString();
      notifyListeners();
      return false;
    }
  }

  List<TodoEntity> get completedTodos => _todos.where((todo) => todo.isCompleted).toList();
  List<TodoEntity> get pendingTodos => _todos.where((todo) => !todo.isCompleted).toList();

  void clearError() {
    _errorMessage = null;
    notifyListeners();
  }
} 